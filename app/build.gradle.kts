import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.bundling.Jar

import java.io.ByteArrayOutputStream

//////////////////////////////////////////////////////////////
// System Information

group = "com.navarrotech"

application {
    mainClass = "org.navarrotech.App" // Entry Point
}

//////////////////////////////////////////////////////////////
// External Packages

repositories {
    mavenCentral()
}

plugins {
    // Core application:
    application

    // IDE:
    idea

    // Third party:
    id("com.teamdev.jxbrowser") version "1.0.2" // JxBrowser
    alias(libs.plugins.jvm) // Apply the org.jetbrains.kotlin.jvm plugin for Kotlin
}

dependencies {
    // Core:
    implementation(libs.guava) // This dependency is used by the application.
    implementation(kotlin("stdlib")) // Kotlin standard library
    implementation("org.apache.logging.log4j:log4j-api:2.17.1") // Log4j
    implementation("org.apache.logging.log4j:log4j-core:2.17.1")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0") // Coroutines
    implementation("io.github.cdimascio:dotenv-java:3.0.0") // Dotenv environment variables
    implementation("com.squareup.okhttp3:okhttp:4.9.0") // Khttp
    implementation("org.postgresql:postgresql:42.5.0") // PostgreSQL

    // Import all app/libs/*.jar files (if any)
    implementation(
        fileTree(
            mapOf(
                "dir" to "libs",
                "include" to listOf("*.jar")
            )
        )
    )

    // Jx Browser:
    implementation(jxbrowser.currentPlatform)
    implementation(jxbrowser.swing)

    // Unit testing:
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

//////////////////////////////////////////////////////////////
// Configuration

java {
    sourceCompatibility = JavaVersion.VERSION_21
    toolchain {
        // Apply a specific Java toolchain to enforce uniformity working on different environments.
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jxbrowser {
    version = "7.38.1"
}

sourceSets {
    // This ensures that all static assets generated by vite will be included in the build
    main {
        resources {
            srcDir("src/main/resources")
            include("**/*")
        }
    }
}

//////////////////////////////////////////////////////////////
// Tasks

tasks {
    // For copying production assets to the build directory (like index.html and other static assets)
    withType<Copy> {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    // For building a fat JAR file, that includes all dependencies and static assets. This is used for building a production jar.
    val jar by getting(Jar::class) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest {
            attributes("Main-Class" to "org.hpa.App")
        }
        from(configurations.runtimeClasspath.get().map {
            if (it.isDirectory) it else zipTree(it)
        })
        // Include .env file in the JAR
        from("src/main/resources") {
            include(".env")
        }
    }
}

//////////////////////////////////////////////////////////////
// Unit Tests

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.22")
        }
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()

    maxHeapSize = "1G"

    testLogging {
        events("passed")
    }
}
